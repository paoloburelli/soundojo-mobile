// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Timers;

namespace SounDojo
{
	public partial class SearchViewController : UIViewController
	{
		public SearchResultsSource source;
		Timer timer;

		public SearchViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewWillAppear (bool animated) {
			base.ViewWillAppear (animated);
			searchBox.BecomeFirstResponder ();
			searchResults.Source = source;
			searchingThrobber.Hidden = true;
			timer = new Timer ();
			timer.AutoReset = true;

			searchBox.EditingChanged += (sender, e) => {
				searchingThrobber.Hidden = false;
				searchingThrobber.StartAnimating ();

				timer.Interval = 1000;
				timer.Enabled = true;

				timer.Elapsed += (tsender, te) => {
					InvokeOnMainThread (() => {
						if (timer.Enabled) {
							Lastfm.Instance.findArtist (searchBox.Text, addArtists);
							Lastfm.Instance.findTrack (searchBox.Text, addTrack);
							Lastfm.Instance.findAlbum (searchBox.Text, addAlbum);
							timer.Enabled = false;
						}
					});
				};
			};

			searchBox.Text = source.SearchQuery;
		}

		void addArtists (List<Artist> obj)
		{
			source.artists = obj;
			searchResults.ReloadData ();
			searchingThrobber.StopAnimating ();
			searchingThrobber.Hidden = true;
		}

		void addTrack (List<Track> obj)
		{
			source.tracks = obj;
			searchResults.ReloadData ();
			searchingThrobber.StopAnimating ();
			searchingThrobber.Hidden = true;
		}

		void addAlbum (List<Album> obj)
		{
			source.albums = obj;
			searchResults.ReloadData ();
			searchingThrobber.StopAnimating ();
			searchingThrobber.Hidden = true;
		}
			
	}
}
